type ApplicationHttp {
    id: ID!
    createdAt: Timestamp!
    updatedAt: Timestamp!
    authorId: ID!
    nomination: String!
    algorithmicTaskLink: String!
    algorithmicTaskFile: String!
    creativeTaskLink: String!
    creativeTaskFile: String!
    engineeringTaskFile: String!
    engineeringTaskCloudLink: String!
    engineeringTaskVideo: String!
    engineeringTaskVideoCloudLink: String!
    note: String!
}

type ApplicationPayloadHttp {
    author: UserHttp!
    nomination: String!
    algorithmicTaskLink: String!
    algorithmicTaskFile: String!
    creativeTaskLink: String!
    creativeTaskFile: String!
    engineeringTaskFile: String!
    engineeringTaskCloudLink: String!
    engineeringTaskVideo: String!
    engineeringTaskVideoCloudLink: String!
    note: String!
}

input NewApplication {
    nomination: String!
    algorithmicTaskLink: String
    algorithmicTaskFile: String
    creativeTaskLink: String
    creativeTaskFile: String
    engineeringTaskFile: String
    engineeringTaskCloudLink: String
    engineeringTaskVideo: String
    engineeringTaskVideoCloudLink: String
    note: String
}

type ApplicationHttpList {
    applications: [ApplicationHttp!]!
    countRows: Int!
}

extend type Mutation {
    CreateApplication(input: NewApplication!): ApplicationHttp! @hasRole(roles: [Student, SuperAdmin])
}

extend type Query {
    GetApplicationById(id: ID!): ApplicationHttp! @hasRole(roles: [Student, SuperAdmin])
    GetAllApplications(page: Int, pageSize: Int): ApplicationHttpList! @hasRole(roles: [Student, SuperAdmin])
}