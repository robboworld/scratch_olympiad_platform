type UserHttp {
	id: ID!
	createdAt: Timestamp!
	updatedAt: Timestamp!
	email: String!
	password: String!
	role: Role!
	fullName: String!
	fullNameNative: String!
	country: String!
	city: String!
	birthdate: Timestamp!
	isActive: Boolean!
}

enum Role {
	Anonymous
	Student
	Parent
	Teacher
	UnitAdmin
	SuperAdmin
}

input NewUser {
	email: String!
	password: String!
	role: Role!
	fullName: String!
	fullNameNative: String!
	country: String!
	city: String!
	birthdate: Timestamp!
}

input UpdateUser {
	id: ID!
	email: String!
	fullName: String!
	fullNameNative: String!
	country: String!
	city: String!
	birthdate: Timestamp!
}

type NewUserResponse {
	id: ID!
	email: String!
	role: Int!
	fullName: String!
	fullNameNative: String!
	country: String!
	city: String!
	birthdate: Timestamp!
}

type UsersList {
	users: [UserHttp!]!
	countRows: Int!
}

type Response {
	ok: Boolean!
}

type Mutation {
	CreateUser(input: NewUser!): UserHttp! @hasRole(roles: [SuperAdmin, UnitAdmin])
	UpdateUser(input: UpdateUser!): UserHttp! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
	DeleteUser(id: ID!): Response! @hasRole(roles: [SuperAdmin, UnitAdmin])
	SetUserIsActive(id: ID!, isActive: Boolean!): Response! @hasRole(roles: [SuperAdmin, UnitAdmin])
}

type Query {
	GetUserByAccessToken: UserHttp! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
	GetUserById(id: ID!): UserHttp! @hasRole(roles: [SuperAdmin, UnitAdmin, Teacher, Parent, Student])
	GetAllUsers(page: Int, pageSize: Int, active: Boolean!, roles: [Role!]!): UsersList! @hasRole(roles: [SuperAdmin, UnitAdmin])
}

directive @hasRole(roles: [Role!]) on FIELD_DEFINITION
scalar Timestamp